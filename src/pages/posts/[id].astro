---
import '../../styles/global.css';   // ✅ 显式引入全局样式
import { getCollection, render } from 'astro:content';
import Post from '../../layout/post.astro';
import Prose from '../../components/Prose.astro';
import Navigation from '../../layout/navigation.astro';
import GoBackToTop from '../../components/goBackToTop.astro';

export async function getStaticPaths() {
  const blogEntries = await getCollection('posts');
  return blogEntries.map((entry) => ({
    params: { id: entry.id },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content, headings } = await render(entry);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>GoatPretty's Blog</title>
  </head>

  <body>
    <Post>
      <Navigation slot="header" />

      <!-- ✅ 正文外层加 post-content，保证缩进 CSS 命中 -->
      <div class="post-content" slot="article">
        <Prose>
          <Content />
        </Prose>
      </div>

      <!-- ✅ 左侧目录（自动缩进，无编号） -->
      <div slot="headings" class="toc w-11/12 space-y-1">
        {
          headings.map((heading) => (
            <a
              class="toc-item block font-bold rounded-md w-full px-2 py-1 break-words leading-snug"
              style={`--depth:${heading.depth};`}
              href={`#${heading.slug}`}
            >
              {heading.text}
            </a>
          ))
        }
      </div>
    </Post>

    <GoBackToTop />
  </body>
</html>

<style>
  /* 目录缩进：根据 --depth 计算左边距 */
  .toc-item { margin-left: calc((var(--depth, 1) - 1) * 1rem); }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    setupCopyButtons();
    setupSmoothAnchors();
  });

  // 代码块复制按钮（无形参函数，彻底规避 TS7006）
  function setupCopyButtons() {
    const codeBlocks = document.querySelectorAll('pre');
    const copyButtonLabel = 'Copy';

    codeBlocks.forEach((codeBlock) => {
      const wrapper = document.createElement('div');
      wrapper.style.position = 'relative';

      const copyButton = document.createElement('button');
      copyButton.className = 'copy-code cursor-copy';
      copyButton.textContent = copyButtonLabel;
      copyButton.style.position = 'absolute';
      copyButton.style.right = '10px';
      copyButton.style.top = '3px';

      codeBlock.setAttribute('tabindex', '0');
      codeBlock.appendChild(copyButton);

      // 父节点空值保护
      if (codeBlock.parentNode) {
        codeBlock.parentNode.insertBefore(wrapper, codeBlock);
        wrapper.appendChild(codeBlock);
      }

      // 用闭包直接捕获 codeBlock / copyButton，不再有参数
      copyButton.addEventListener('click', async () => {
        const code = codeBlock.querySelector('code');
        const text = (code && code.textContent) ? code.textContent : '';
        try {
          await navigator.clipboard.writeText(text);
          copyButton.textContent = 'Copied';
          setTimeout(() => { copyButton.textContent = copyButtonLabel; }, 1000);
        } catch {
          // 可选：失败时提示
          copyButton.textContent = 'Failed';
          setTimeout(() => { copyButton.textContent = copyButtonLabel; }, 1000);
        }
      });
    });
  }

  // 平滑滚动目录跳转
  function setupSmoothAnchors() {
    const anchors = document.querySelectorAll("a[href^='#']");
    anchors.forEach((anchor) => {
      anchor.addEventListener('click', (e) => {
        e.preventDefault();
        const href = anchor.getAttribute('href');
        if (!href) return;
        const targetId = href.slice(1);
        const targetElement = document.getElementById(targetId);
        if (targetElement) {
          targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      });
    });
  }
</script>
