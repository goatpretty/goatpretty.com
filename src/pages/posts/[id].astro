---
import { getCollection, render } from 'astro:content';
import Post from '../../layout/post.astro';
import Prose from '../../components/Prose.astro';
import Navigation from '../../layout/navigation.astro';
import GoBackToTop from '../../components/goBackToTop.astro';

export async function getStaticPaths() {
    const blogEntries = await getCollection('posts');
    return blogEntries.map((entry) => ({
        params: { id: entry.id },
        props: { entry },
    }));
}

const { entry } = Astro.props;
const { Content, headings } = await render(entry);
---

<html lang='en'>
    <head>
        <meta charset='utf-8' />
        <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
        <meta name='viewport' content='width=device-width' />
        <meta name='generator' content={Astro.generator} />
        <title>GoatPretty's Blog</title>
    </head>
    <body>
        <Post>
            <Navigation slot='header' />
            <Prose slot='article'>
                <Content />
            </Prose>
            <div slot='headings' class='w-11/12 space-y-1'>
                {
                    headings.map(
                        (
                            heading: {
                                depth: number;
                                slug: string;
                                text: string;
                            },
                            id: number
                        ) => {
                            let space = ' '.repeat((heading.depth - 1) * 4);
                            let text = `${id + 1}. ${heading.text}`;
                            let full_text = `${space}${text}`;
                            return (
                                <a
                                    class='whitespace-pre
                                        text-profileTextLight dark:text-profileTextDark 
                                        hover:bg-bgLight dark:hover:bg-bgDark
                                        rounded-md w-full block font-bold text-ellipsis overflow-hidden'
                                    href={`#${heading.slug}`}
                                >
                                    {full_text}
                                </a>
                            );
                        }
                    )
                }
            </div>
        </Post>
        <GoBackToTop />
    </body>
</html>

<script>
    let copyButtonLabel = 'Copy';
    let codeBlocks = Array.from(document.querySelectorAll('pre'));

    for (let codeBlock of codeBlocks) {
        let wrapper = document.createElement('div');
        wrapper.style.position = 'relative';
        let copyButton = document.createElement('button');
        copyButton.className = 'copy-code cursor-copy';
        copyButton.innerHTML = copyButtonLabel;
        copyButton.style.position = 'absolute';
        copyButton.style.right = '10px';
        copyButton.style.top = '3px';

        codeBlock.setAttribute('tabindex', '0');
        codeBlock.appendChild(copyButton);

        codeBlock.parentNode!.insertBefore(wrapper, codeBlock);
        wrapper.appendChild(codeBlock);

        copyButton.addEventListener('click', async () => {
            await copyCode(codeBlock, copyButton);
        });
    }

    async function copyCode(block: HTMLElement, button: HTMLElement) {
        let code = block.querySelector('code');
        let text = code?.innerText || '';

        await navigator.clipboard.writeText(text);

        button.innerText = 'Copied';

        setTimeout(() => {
            button.innerText = copyButtonLabel;
        }, 1000);
    }
    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll("a[href^='#']").forEach((anchor) => {
            anchor.addEventListener('click', function (event) {
                event.preventDefault();
                const targetId = anchor.getAttribute('href')!.substring(1);
                const targetElement = document.getElementById(targetId);

                if (targetElement) {
                    targetElement.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start',
                    });
                }
            });
        });
    });
</script>
