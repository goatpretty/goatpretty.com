---
interface LinkItem {
  name: string;
  url: string;
}

interface Props {
  links: LinkItem[];
}

const { links } = Astro.props as Props;

// ✅ 标记内置项（仅桌面端隐藏）
const isBuiltIn = (name: string) => name === 'Blogs' || name === 'About';
---

<div class="relative select-none">
  <!-- 按钮 -->
  <button
    id="more-toggle"
    class="inline-flex flex-initial p-2 cursor-pointer
           text-fontLight dark:text-fontDark hover:text-phOrange transition"
  >
    More ▾
  </button>

  <!-- 下拉菜单（带淡入淡出动画 + 右对齐） -->
  <div
    id="more-dropdown"
    class="invisible opacity-0 absolute right-0 top-full mt-2 mr-2 w-48
           bg-bgLight dark:bg-bgDark
           border border-gray-300 dark:border-gray-700
           rounded-lg shadow-lg overflow-hidden z-50
           transform scale-95 transition-all duration-300 ease-out"
  >
    {links.map((link) => (
      <a
        href={link.url}
        target="_blank"
        rel="noopener noreferrer"
        class={`block px-4 py-2 text-fontLight dark:text-fontDark
               hover:bg-phOrange hover:text-white transition-colors ${isBuiltIn(link.name) ? 'md:hidden' : ''}`}
      >
        {link.name}
      </a>
    ))}
  </div>

  <script>
    const toggleBtn = document.getElementById('more-toggle') as HTMLButtonElement | null;
    const dropdown = document.getElementById('more-dropdown') as HTMLDivElement | null;

    if (toggleBtn && dropdown) {
      const openMenu = () => {
        dropdown.classList.remove('invisible', 'opacity-0', 'scale-95');
        dropdown.classList.add('visible', 'opacity-100', 'scale-100');
      };

      const closeMenu = () => {
        dropdown.classList.add('opacity-0', 'scale-95');
        dropdown.classList.remove('opacity-100', 'scale-100');
        setTimeout(() => dropdown.classList.add('invisible'), 200);
      };

      let isOpen = false;

      toggleBtn.addEventListener('click', (e: MouseEvent) => {
        e.stopPropagation();
        isOpen ? closeMenu() : openMenu();
        isOpen = !isOpen;
      });

      document.addEventListener('click', (e: MouseEvent) => {
        const target = e.target as Node;
        if (!toggleBtn.contains(target) && !dropdown.contains(target) && isOpen) {
          closeMenu();
          isOpen = false;
        }
      });
    }
  </script>
</div>
