---
interface LinkItem {
  name: string;
  url: string;
}

interface Props {
  links: LinkItem[];
}

const { links } = Astro.props as Props;
---

<!-- ✅ 通用 More 菜单（桌面 + 移动） -->
<div class="relative select-none">
  <!-- 触发按钮 -->
  <button
    id="more-toggle"
    class="inline-flex flex-initial p-2 cursor-pointer items-center justify-center
           text-fontLight dark:text-fontDark hover:text-phOrange transition"
    aria-label="Toggle menu"
    aria-expanded="false"
  >
    <!-- 桌面端文案 -->
    <span class="hidden md:inline">More ▾</span>

    <!-- 移动端汉堡按钮 -->
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-6 w-6 md:hidden"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
      stroke-width="2"
      aria-hidden="true"
    >
      <path stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16" />
    </svg>
  </button>

  <!-- ✅ 下拉菜单（右对齐，桌面/移动同款） -->
  <div
    id="more-dropdown"
    class="absolute right-0 top-full mt-2 w-56
           bg-bgLight dark:bg-bgDark border border-gray-300 dark:border-gray-700
           rounded-xl shadow-lg overflow-hidden z-[1000]
           opacity-0 invisible scale-95
           transition-all duration-200 ease-out"
  >
    {links.map((link) => (
      <a
        href={link.url}
        target={link.url.startsWith('http') ? '_blank' : '_self'}
        rel="noopener noreferrer"
        class="block px-4 py-2 text-fontLight dark:text-fontDark
               hover:bg-phOrange hover:text-white transition-colors text-center"
      >
        {link.name}
      </a>
    ))}
  </div>

  <script>
    (function () {
      // 元素
      const toggleBtn = document.getElementById('more-toggle') as HTMLButtonElement | null;
      const dropdown = document.getElementById('more-dropdown') as HTMLDivElement | null;

      if (!toggleBtn || !dropdown) return;

      let isOpen = false;

      // 类型守卫：修复 TS 报错（EventTarget -> Node）
      function isNode(x: unknown): x is Node {
        return x instanceof Node;
      }

      // 开关
      const openMenu = () => {
        dropdown.classList.remove('invisible', 'opacity-0', 'scale-95');
        dropdown.classList.add('visible', 'opacity-100', 'scale-100');
        toggleBtn.setAttribute('aria-expanded', 'true');
        isOpen = true;
      };

      const closeMenu = () => {
        dropdown.classList.remove('opacity-100', 'scale-100');
        dropdown.classList.add('opacity-0', 'scale-95');
        toggleBtn.setAttribute('aria-expanded', 'false');
        setTimeout(() => {
          dropdown.classList.add('invisible');
        }, 150);
        isOpen = false;
      };

      // 触发（同时支持移动端 touchstart）
      const onToggle = (e: Event) => {
        e.stopPropagation();
        isOpen ? closeMenu() : openMenu();
      };

      toggleBtn.addEventListener('click', onToggle, { passive: true });
      toggleBtn.addEventListener('touchstart', onToggle, { passive: true });

      // 点击菜单项后自动关闭
      dropdown.querySelectorAll('a').forEach((a) => {
        a.addEventListener('click', () => closeMenu(), { passive: true });
        a.addEventListener('touchstart', () => closeMenu(), { passive: true });
      });

      // 点击外部关闭（TS 安全）
      const onOutside = (e: Event) => {
        const target = e.target;
        if (!isOpen) return;
        if (!isNode(target)) return;
        if (!dropdown.contains(target) && !toggleBtn.contains(target)) {
          closeMenu();
        }
      };

      document.addEventListener('click', onOutside, { passive: true });
      document.addEventListener('touchstart', onOutside, { passive: true });

      // ESC 关闭
      document.addEventListener('keydown', (e: KeyboardEvent) => {
        if (e.key === 'Escape' && isOpen) closeMenu();
      });

      // 视口变化时收起，避免位置错乱
      window.addEventListener('resize', () => {
        if (isOpen) closeMenu();
      });
    })();
  </script>
</div>
