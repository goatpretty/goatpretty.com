---
interface LinkItem {
  name: string;
  url: string;
}

interface Props {
  links: LinkItem[];
}

const { links } = Astro.props as Props;
---

<div class="relative">
  <!-- 按钮 -->
  <button
    id="more-toggle"
    class="inline-flex flex-initial p-2 cursor-pointer
           text-fontLight dark:text-fontDark hover:text-phOrange transition"
  >
    More ▾
  </button>

  <!-- 下拉菜单 -->
  <div
    id="more-dropdown"
    class="hidden absolute right-6 mt-2 w-48
           bg-bgLight dark:bg-bgDark
           border border-gray-300 dark:border-gray-700
           rounded-lg shadow-lg overflow-hidden z-50 transition-all duration-300"
  >
    {links.map((link: LinkItem) => (
      <a
        href={link.url}
        target="_blank"
        class="block px-4 py-2 text-fontLight dark:text-fontDark
               hover:bg-foilLight dark:hover:bg-bgDark transition"
      >
        {link.name}
      </a>
    ))}
  </div>

  <script>
    // TS安全写法
    const toggleBtn = document.getElementById('more-toggle') as HTMLButtonElement | null;
    const dropdown = document.getElementById('more-dropdown') as HTMLDivElement | null;

    if (toggleBtn && dropdown) {
      toggleBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        dropdown.classList.toggle('hidden');
      });

      document.addEventListener('click', (e) => {
        const target = e.target as Node | null;
        if (target && !toggleBtn.contains(target) && !dropdown.contains(target)) {
          dropdown.classList.add('hidden');
        }
      });
    }
  </script>
</div>
